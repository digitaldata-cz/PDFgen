// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pdfgen.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PdfGenClient is the client API for PdfGen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PdfGenClient interface {
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
}

type pdfGenClient struct {
	cc grpc.ClientConnInterface
}

func NewPdfGenClient(cc grpc.ClientConnInterface) PdfGenClient {
	return &pdfGenClient{cc}
}

func (c *pdfGenClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, "/pdfgen.PdfGen/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PdfGenServer is the server API for PdfGen service.
// All implementations must embed UnimplementedPdfGenServer
// for forward compatibility
type PdfGenServer interface {
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	mustEmbedUnimplementedPdfGenServer()
}

// UnimplementedPdfGenServer must be embedded to have forward compatible implementations.
type UnimplementedPdfGenServer struct {
}

func (UnimplementedPdfGenServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedPdfGenServer) mustEmbedUnimplementedPdfGenServer() {}

// UnsafePdfGenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdfGenServer will
// result in compilation errors.
type UnsafePdfGenServer interface {
	mustEmbedUnimplementedPdfGenServer()
}

func RegisterPdfGenServer(s grpc.ServiceRegistrar, srv PdfGenServer) {
	s.RegisterService(&PdfGen_ServiceDesc, srv)
}

func _PdfGen_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfGenServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdfgen.PdfGen/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfGenServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PdfGen_ServiceDesc is the grpc.ServiceDesc for PdfGen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PdfGen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdfgen.PdfGen",
	HandlerType: (*PdfGenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _PdfGen_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pdfgen.proto",
}
